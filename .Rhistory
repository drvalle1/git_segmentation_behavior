tz()
which.ltraj(dat.traj2, "min(date)")
which.ltraj(dat.traj2, min(date))
min(dat.traj2[[1]])
min(dat.traj2[[1]]$date)
refda <- strptime("2016-07-02 12:00:00", "%Y-%m-%d %H:%M:%S", tz="UTC")
dat.traj3 <- setNA(dat.traj2, refda, 1, units = "hour")
dat.traj3
plotltr(dat.traj3, "dt/3600")
plotltr(dat.traj3[[1]], "dt/3600")
plotltr(dat.traj3[c(1)], "dt/3600")
plotltr(dat.traj3[c(2)], "dt/3600")
plotltr(dat.traj3[c(3)], "dt/3600")
plotltr(dat.traj3[c(4)], "dt/3600")
dat.traj4 <- sett0(dat.traj3, refda, 1, units = "hour")
dat.traj4
plotltr(dat.traj3[c(1)], "dt/3600")  #relatively wide range in time interval
plotltr(dat.traj3[c(2)], "dt/3600")  #relatively wide range in time interval
plotltr(dat.traj3[c(3)], "dt/3600")  #relatively wide range in time interval
plotltr(dat.traj3[c(4)], "dt/3600")  #relatively wide range in time interval
plotltr(dat.traj3[c(5)], "dt/3600")  #relatively wide range in time interval
plotltr(dat.traj3[c(6)], "dt/3600")  #relatively wide range in time interval
plotltr(dat.traj3[c(7)], "dt/3600")  #relatively wide range in time interval
plotltr(dat.traj3[c(8)], "dt/3600")  #relatively wide range in time interval
plotltr(dat.traj3[c(9)], "dt/3600")  #relatively wide range in time interval
plotltr(dat.traj3[c(10)], "dt/3600")  #relatively wide range in time interval
plotltr(dat.traj3[c(11)], "dt/3600")  #relatively wide range in time interval
plotltr(dat.traj3[c(10)], "dt/3600")  #relatively wide range in time interval
runsNAltraj(dat.traj3)
dat.traj4 <- sett0(dat.traj3[c(1)], refda, 1, units = "hour")
dat.traj4 <- sett0(dat.traj3, refda, 1, units = "hour")
runsNAltraj(dat.traj3[c(1)])
plotNAltraj(dat.traj3[c(1)])
runsNAltraj(dat.traj3[c(2)])
plotNAltraj(dat.traj3[c(2)])
runsNAltraj(dat.traj3[c(2)])
runsNAltraj(dat.traj3[c(3)])
plotNAltraj(dat.traj3[c(3)])
dat.traj4 <- sett0(dat.traj3, refda, 1, units = "hour")
dat.traj4
runsNAltraj(dat.traj3[c(3)])
dat.traj3
dat.traj4<- redisltraj(na.omit(dat.traj3), 3600, type="time")
dat.traj4
1800+7200
filter<- which.ltraj(dat.traj3, "dt<=9000")  #select all obs with dt < 2.5 h
dat.traj3[burst(dat.traj3)%in%filter$burst]
filter
9134+4922+3068+1182
plotltr(dat.traj3[c(10)], "dt/3600")  #relatively wide range in time interval
dat.traj4<- sett0(dat.traj3, refda, 1, "cs", dt/6, units = "hour")
dat.traj4<- sett0(dat.traj3, refda, 1, "cs", 1/6, units = "hour")
dat.traj3
dat.traj4<- sett0(dat.traj3, refda, 1, "cs", units = "hour")
dat.traj4
dat.traj4<- sett0(dat.traj3, refda, 1, "cs", 1/6, units = "hour")
sett0
dat.traj4<- sett0(dat.traj3, refda, 1, "cs", 1/10, units = "hour")
dat.traj4<- sett0(dat.traj3, refda, 1, "cs", 1/2, units = "hour")
dat.traj4
dat.traj4<- sett0(dat.traj3, refda, 1, "cs", 1/3, units = "hour")
dat.traj.df<- ld(dat.traj3)
View(dat.traj.df)
plotltr(dat.traj3[c(1)], "dt/3600")  #relatively wide range in time interval
dat.traj.df[dat.traj.df$dt!=3600]
dat.traj.df[dat.traj.df$dt!=3600,]
round(3660/3600)
3660/3600
round(3540/3600)
round(4200/3600)
4200/3600
2580/3600
round(2580/3600)
round(2580/3600)*3600
foo<- round(dat.traj.df$dt/3600)*3600
foo
foo[foo!=3600,]
foo[foo!=3600]
View(dat)
str(dat)
getwd()
dat<- read.csv("Snail Kite Gridded Data.csv", header = T, sep = ',')
consol.data=function(dat) {
id<- unique(dat$id)
n=length(id)
dat.list<- vector("list", n)
names(dat.list)<- id
for (i in 1:length(id)) {
dat.list[[i]]<- dat[dat$id==id[i],]
}
dat.list
}
dat.list<- consol.data(dat)
3600/60
max(dt)
max(dat$dt)
max(dat$dt,na.rm = T)
max(dat$dt,na.rm = T)/60
dat.traj2
plotltr(dat.traj2[c(1)], "dt/3600")
plotltr(dat.traj2[c(2)], "dt/3600")  #can see that mainly 2 h dt in 1st burst, with gaps due to night interval and occasional 1 h dt, which changes permanently to 1 h dt
plotltr(dat.traj2[c(3)], "dt/3600")  #can see that mainly 2 h dt in 1st burst, with gaps due to night interval and occasional 1 h dt, which changes permanently to 1 h dt
plotltr(dat.traj2[c(4)], "dt/3600")  #can see that mainly 2 h dt in 1st burst, with gaps due to night interval and occasional 1 h dt, which changes permanently to 1 h dt
View(dat)
View(dat.traj.df)
dat.new<- dat[,1:4] #save data for IDs, coords, and dates
dat.traj.df<- ld(dat.traj2) #turn ltraj object into DF
View(dat.new)
dat.new<- cbind(dat.new, dat.traj.df[,4:10])
dat.traj.df<- ld(dat.traj2) #turn ltraj object into DF
View(dat.traj.df)
dat.new<- dat[,1:4] #save data for IDs, coords, and dates
dat.traj.df<- ld(dat.traj2) #turn ltraj object into DF
dat.new<- cbind(dat.new, dat.traj.df[,c(4:10,12)])
unique(dat.new$burst)
tail(dat.new %>% filter(burst == 1.1))
tail(dat.new %>% filter(burst == 1.2))
head(dat.new %>% filter(burst == 1.2))
head(dat.new %>% filter(burst == 1.3))
tail(dat.new %>% filter(burst == 1.3))
head(dat.new %>% filter(burst == 1.4))
dat.new %>% filter(id==1) %>% max(dt, na.rm=T)
dat.new %>% filter(id==1) %>% select(dt) %>% max()
dat.new %>% filter(id==1) %>% dplyr::select(dt) %>% max()
dat.new %>% filter(id==1) %>% dplyr::select(dt) %>% max(na.rm=T)
dat.new %>% filter(id==1) %>% dplyr::select(dt) %>% max(na.rm=T)/60
10*60
seq(0,3600,by=600)
1800+3600
seq(0,9000,by=600)
dt.bins<- c(seq(0,9000,by=600), Inf)
tmp=which(dat$dt >= dt.bins[1] & dat$dt < dt.bins[1+1])
dat[252:255,]
length(dt.bins)
dt.bins
dt.tab<- matrix(NA, length(dt.bins)-1, 2)
count(tmp)
length(tmp)
dt.tab<- matrix(NA, length(dt.bins)-1, 2)
for (i in 1:length(dat.list)) {
dt.bins<- c(seq(0,9000,by=600), Inf)
tmp=which(dat$dt >= dt.bins[i] & dat$dt < dt.bins[i+1])
dt.tab[i,1]=paste(dt.bins[i]/60,"-",dt.bins[i+1]/60,"min")
dt.tab[i,2]=length(tmp)
}
View(dt.tab)
View(dat)
dat.list[[1]]
unique(dat$id)
dat.out<- vector("list", n)
dat.out<- vector("list", length(unique(dat$id)))
names(dat.out)<- unique(dat$id)
dt.tab<- matrix(NA, length(dt.bins)-1, 2)
for (i in 1:length(dat.list)) {
id=dat.list[[i]]
dt.bins<- c(seq(0,9000,by=600), Inf)
for (j in 1:nrow(id)) {
tmp=which(dat$dt >= dt.bins[j] & dat$dt < dt.bins[j+1])
dt.tab[j,1]=paste(dt.bins[j]/60,"-",dt.bins[j+1]/60,"min")
dt.tab[j,2]=length(tmp)
}
dat.out[[i]]=dt.tab
}
i=1
id=dat.list[[i]]
dt.bins<- c(seq(0,9000,by=600), Inf)
for (j in 1:nrow(id)) {
tmp=which(dat$dt >= dt.bins[j] & dat$dt < dt.bins[j+1])
dt.tab[j,1]=paste(dt.bins[j]/60,"-",dt.bins[j+1]/60,"min")
dt.tab[j,2]=length(tmp)
}
length(dt.bins)
dat.out<- vector("list", length(unique(dat$id)))
names(dat.out)<- unique(dat$id)
dt.tab<- matrix(NA, length(dt.bins)-1, 2)
for (i in 1:length(dat.list)) {
id=dat.list[[i]]
dt.bins<- c(seq(0,9000,by=600), Inf)
for (j in 1:length(dt.bins)) {
tmp=which(dat$dt >= dt.bins[j] & dat$dt < dt.bins[j+1])
dt.tab[j,1]=paste(dt.bins[j]/60,"-",dt.bins[j+1]/60,"min")
dt.tab[j,2]=length(tmp)
}
dat.out[[i]]=dt.tab
}
id=dat.list[[i]]
dt.bins<- c(seq(0,9000,by=600), Inf)
for (j in 1:length(dt.bins)) {
tmp=which(dat$dt >= dt.bins[j] & dat$dt < dt.bins[j+1])
dt.tab[j,1]=paste(dt.bins[j]/60,"-",dt.bins[j+1]/60,"min")
dt.tab[j,2]=length(tmp)
}
j=1
tmp=which(dat$dt >= dt.bins[j] & dat$dt < dt.bins[j+1])
dt.tab[j,1]=paste(dt.bins[j]/60,"-",dt.bins[j+1]/60,"min")
dt.tab[j,2]=length(tmp)
dat.out[[i]]=dt.tab
dat.out[[1]]
dat.out<- vector("list", length(unique(dat$id)))
names(dat.out)<- unique(dat$id)
dt.tab<- matrix(NA, length(dt.bins)-1, 2)
id=dat.list[[i]]
dt.bins<- c(seq(0,9000,by=600), Inf)
tmp=which(dat$dt >= dt.bins[j] & dat$dt < dt.bins[j+1])
tmp
paste(dt.bins[j]/60,"-",dt.bins[j+1]/60,"min")
dt.tab[j,1]=paste(dt.bins[j]/60,"-",dt.bins[j+1]/60,"min")
colnames(dt.tab)<- c("Interval", "N")
length(tmp)
dt.tab[j,2]=length(tmp)
View(dt.tab)
j=2
tmp=which(dat$dt >= dt.bins[j] & dat$dt < dt.bins[j+1])
dt.tab[j,1]=paste(dt.bins[j]/60,"-",dt.bins[j+1]/60,"min")
dt.tab[j,2]=length(tmp)
j=3
tmp=which(dat$dt >= dt.bins[j] & dat$dt < dt.bins[j+1])
dt.tab[j,1]=paste(dt.bins[j]/60,"-",dt.bins[j+1]/60,"min")
dt.tab[j,2]=length(tmp)
View(dt.tab)
j=16
tmp=which(dat$dt >= dt.bins[j] & dat$dt < dt.bins[j+1])
dt.tab[j,1]=paste(dt.bins[j]/60,"-",dt.bins[j+1]/60,"min")
dt.tab[j,2]=length(tmp)
length(dat.list)
length(dt.bins)
dat.out<- vector("list", length(unique(dat$id)))
names(dat.out)<- unique(dat$id)
dt.tab<- matrix(NA, length(dt.bins)-1, 2)
colnames(dt.tab)<- c("Interval", "N")
View(dt.tab)
for (i in 1:length(dat.list)) {
id=dat.list[[i]]
dt.bins<- c(seq(0,9000,by=600), Inf)
for (j in 1:length(dt.bins)-1) {
tmp=which(dat$dt >= dt.bins[j] & dat$dt < dt.bins[j+1])
dt.tab[j,1]=paste(dt.bins[j]/60,"-",dt.bins[j+1]/60,"min")
dt.tab[j,2]=length(tmp)
}
dat.out[[i]]=dt.tab
}
dat.out$`1`
dat.out$`12`
dat.out$`19`
dat.out$`27`
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/joshcullen/Documents/Snail Kite Project/Data")
dat<- read.csv("Snail Kite Gridded Data.csv", header = T, sep = ',')
library(dplyr)
library(adehabitatLT)
library(knitr)
consol.data=function(dat) {  #create list by ID
id<- unique(dat$id)
n=length(id)
dat.list<- vector("list", n)
names(dat.list)<- id
for (i in 1:length(id)) {
dat.list[[i]]<- dat[dat$id==id[i],]
}
dat.list
}
dat.list<- consol.data(dat)
dat.out<- vector("list", length(unique(dat$id)))
names(dat.out)<- unique(dat$id)
dt.tab<- matrix(NA, length(dt.bins)-1, 2)
colnames(dt.tab)<- c("Interval", "N")
for (i in 1:length(dat.list)) {
id=dat.list[[i]]
dt.bins<- c(seq(0,9000,by=600), Inf)
for (j in 1:length(dt.bins)-1) {
tmp=which(dat$dt >= dt.bins[j] & dat$dt < dt.bins[j+1])
dt.tab[j,1]=paste(dt.bins[j]/60,"-",dt.bins[j+1]/60,"min")
dt.tab[j,2]=length(tmp)
}
dat.out[[i]]=dt.tab
}
kable(dat.out$`1`)
setwd("/Users/joshcullen/Documents/Snail Kite Project/Data")
dat<- read.csv("Snail Kite Gridded Data.csv", header = T, sep = ',')
library(dplyr)
library(adehabitatLT)
library(knitr)
consol.data=function(dat) {  #create list by ID
id<- unique(dat$id)
n=length(id)
dat.list<- vector("list", n)
names(dat.list)<- id
for (i in 1:length(id)) {
dat.list[[i]]<- dat[dat$id==id[i],]
}
dat.list
}
dat.list<- consol.data(dat)
dat.out<- vector("list", length(unique(dat$id)))
names(dat.out)<- unique(dat$id)
dt.tab<- matrix(NA, length(dt.bins)-1, 2)
colnames(dt.tab)<- c("Interval", "N")
for (i in 1:length(dat.list)) {
id=dat.list[[i]]
dt.bins<- c(seq(0,9000,by=600), Inf)
for (j in 1:length(dt.bins)-1) {
tmp=which(dat$dt >= dt.bins[j] & dat$dt < dt.bins[j+1])
dt.tab[j,1]=paste(dt.bins[j]/60,"-",dt.bins[j+1]/60,"min")
dt.tab[j,2]=length(tmp)
}
dat.out[[i]]=dt.tab
}
kable(dat.out$`1`)
setwd("/Users/joshcullen/Documents/Snail Kite Project/Data")
dat<- read.csv("Snail Kite Gridded Data.csv", header = T, sep = ',')
library(dplyr)
library(adehabitatLT)
library(knitr)
consol.data=function(dat) {  #create list by ID
id<- unique(dat$id)
n=length(id)
dat.list<- vector("list", n)
names(dat.list)<- id
for (i in 1:length(id)) {
dat.list[[i]]<- dat[dat$id==id[i],]
}
dat.list
}
dat.list<- consol.data(dat)
dat.out<- vector("list", length(unique(dat$id)))
names(dat.out)<- unique(dat$id)
dt.tab<- matrix(NA, length(dt.bins)-1, 2)
colnames(dt.tab)<- c("Interval", "N")
dt.bins<- c(seq(0,9000,by=600), Inf)
for (i in 1:length(dat.list)) {
id=dat.list[[i]]
for (j in 1:length(dt.bins)-1) {
tmp=which(dat$dt >= dt.bins[j] & dat$dt < dt.bins[j+1])
dt.tab[j,1]=paste(dt.bins[j]/60,"-",dt.bins[j+1]/60,"min")
dt.tab[j,2]=length(tmp)
}
dat.out[[i]]=dt.tab
}
kable(dat.out$`1`)
kable(dat.out$`1`)
setwd("/Users/joshcullen/Documents/Snail Kite Project/Data")
dat<- read.csv("Snail Kite Gridded Data.csv", header = T, sep = ',')
library(dplyr)
library(adehabitatLT)
library(knitr)
consol.data=function(dat) {  #create list by ID
id<- unique(dat$id)
n=length(id)
dat.list<- vector("list", n)
names(dat.list)<- id
for (i in 1:length(id)) {
dat.list[[i]]<- dat[dat$id==id[i],]
}
dat.list
}
dat.list<- consol.data(dat)
dat.out<- vector("list", length(unique(dat$id)))
names(dat.out)<- unique(dat$id)
dt.tab<- matrix(NA, length(dt.bins)-1, 2)
consol.data=function(dat) {  #create list by ID
id<- unique(dat$id)
n=length(id)
dat.list<- vector("list", n)
names(dat.list)<- id
for (i in 1:length(id)) {
dat.list[[i]]<- dat[dat$id==id[i],]
}
dat.list
}
dat.list<- consol.data(dat)
dat.out<- vector("list", length(unique(dat$id)))
names(dat.out)<- unique(dat$id)
dt.bins<- c(seq(0,9000,by=600), Inf)
dt.tab<- matrix(NA, length(dt.bins)-1, 2)
colnames(dt.tab)<- c("Interval", "N")
for (i in 1:length(dat.list)) {
id=dat.list[[i]]
for (j in 1:length(dt.bins)-1) {
tmp=which(dat$dt >= dt.bins[j] & dat$dt < dt.bins[j+1])
dt.tab[j,1]=paste(dt.bins[j]/60,"-",dt.bins[j+1]/60,"min")
dt.tab[j,2]=length(tmp)
}
dat.out[[i]]=dt.tab
}
kable(dat.out$`1`)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
coords<- dat[c("utmlong","utmlat")]
dat.spdf<- SpatialPointsDataFrame(coords = coords, data = dat)
proj4string(dat.spdf)<- CRS("+init=epsg:32617")
dat.traj<- as.ltraj(xy = coordinates(dat.spdf), date = dat.spdf$ESTtime, id = dat.spdf$id)
setwd("/Users/joshcullen/Documents/Snail Kite Project/Data")
dat<- read.csv("Snail Kite Gridded Data.csv", header = T, sep = ',')
coords<- dat[c("utmlong","utmlat")]
dat.spdf<- SpatialPointsDataFrame(coords = coords, data = dat)
proj4string(dat.spdf)<- CRS("+init=epsg:32617")
dat.traj<- as.ltraj(xy = coordinates(dat.spdf), date = dat.spdf$ESTtime, id = dat.spdf$id)
library(dplyr)
library(adehabitatLT)
library(knitr)
library(lubridate)
setwd("/Users/joshcullen/Documents/Snail Kite Project/Data")
dat<- read.csv("Snail Kite Gridded Data.csv", header = T, sep = ',')
dat$ESTtime<- as_datetime(dat$ESTtime)
consol.data=function(dat) {  #create list by ID
id<- unique(dat$id)
n=length(id)
dat.list<- vector("list", n)
names(dat.list)<- id
for (i in 1:length(id)) {
dat.list[[i]]<- dat[dat$id==id[i],]
}
dat.list
}
dat.list<- consol.data(dat)
dat.out<- vector("list", length(unique(dat$id)))
names(dat.out)<- unique(dat$id)
dt.bins<- c(seq(0,9000,by=600), Inf)
dt.tab<- matrix(NA, length(dt.bins)-1, 2)
colnames(dt.tab)<- c("Interval (min)", "N")
for (i in 1:length(dat.list)) {
id=dat.list[[i]]
for (j in 1:length(dt.bins)-1) {
tmp=which(dat$dt >= dt.bins[j] & dat$dt < dt.bins[j+1])
dt.tab[j,1]=paste(dt.bins[j]/60,"-",dt.bins[j+1]/60)
dt.tab[j,2]=length(tmp)
}
dat.out[[i]]=dt.tab
}
coords<- dat[c("utmlong","utmlat")]
dat.spdf<- SpatialPointsDataFrame(coords = coords, data = dat)
proj4string(dat.spdf)<- CRS("+init=epsg:32617")
dat.traj<- as.ltraj(xy = coordinates(dat.spdf), date = dat.spdf$ESTtime, id = dat.spdf$id)
grtr.1d <- function(dt) {  #cut traj when gap larger than 1 day
return(dt > (1*3600*24))
}
dat.traj2<- cutltraj(dat.traj, "grtr.1d(dt)", nextr = TRUE)
dat.traj2
dat.new<- dat[,1:4] #save data for IDs, coords, and dates
dat.traj.df<- ld(dat.traj2) #turn ltraj object into DF
dat.new<- cbind(dat.new, dat.traj.df[,c(4:10,12)])
plotltr(dat.traj2[c(1)], "dt/3600")  #can see that mainly 2 h dt in 1st burst, with gaps due to night interval and occasional 1 h dt, which changes permanently to 1 h dt
plotltr(dat.traj2[c(2)], "dt/3600")
plotltr(dat.traj2[c(3)], "dt/3600")
plotltr(dat.traj2[c(1)], "dt/3600", ylab="Hours")
plotltr(dat.traj2[c(1)], "dt/3600")
?plot
plotltr(dat.traj2[c(1)], "dt/3600", main="ID1")
plotltr(dat.traj2[c(1)], "dt/3600", ylab="Hour")
plotltr(dat.traj2[c(1)], "dt/3600", ylab="")
plotltr(dat.traj2[c(1)], which = "dt/3600", ylab="")
dat.new %>% filter(burst==1.1) %>% nrow()
plotltr(dat.traj2[c(1)], "dt/3600")
plotltr(dat.traj2[c(1)], "dt/3600")
plotltr(dat.traj2[c(2)], "dt/3600")
plotltr(dat.traj2[c(3)], "dt/3600")
dat.new %>% filter(burst==1.3) %>% nrow()
library(devtools)
install_github("JesJehle/earthEngineGrabR")
library(earthEngineGrabR)
ee_grab_install()
ee_grab_install()
Y
Sys.which("python")
library(earthEngineGrabR)
ee_grab_install()
library(reticulate)
use_python("/usr/bin/python")
ee_grab_install()
use_virtualenv("~/myenv")
use_condaenv("myenv")
use_condaenv(condaenv = "r-nlp", conda = "/opt/anaconda3/bin/conda")
Sys.which("python")
ee_grab_install()
system('. /home/joshcullen/conda/etc/profile.d/conda.sh')
setwd("~/Documents/Snail Kite Project/Data")
getwd()
use_python("/usr/bin/python")
use_virtualenv(getwd())
use_condaenv("Data")
py_config()
py_install()
Sys.which("python")
ee_grab_install()
use_python("/usr/bin/python")
use_condaenv("Data")
library(reticulate)
Sys.which("python")
ee_grab_install()
py_config()
conda_list()
library(earthEngineGrabR)
ee_grab_install()
Sys.which("python")
use_python("/usr/bin/python")
py_config()
use_virtualenv("~/usr/local/bin/python3")
use_condaenv("python3")
use_condaenv(condaenv = "r-nlp", conda = "/opt/anaconda3/bin/conda")
ee_grab_install()
use_python("/usr/local/bin/python3")
py_config()
library(devtools)
devtools::install_github("rstudio/reticulate")
library(reticulate)
py_config()
library(earthEngineGrabR)
ee_grab_install()
py_discover_config()
use_virtualenv("/Users/joshcullen/.virtualenvs/r-reticulate/bin/python")
use_condaenv("python")
use_virtualenv("/Users/joshcullen/.virtualenvs/r-reticulate/bin")
use_condaenv("python")
