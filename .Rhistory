ind=as.numeric(names(tmp1))
res.TA[i-1,ind]=tmp1
#get TAA results
tmp1=tmp[,'TAA']
ifelse(nrow(tmp1[is.na(tmp1),])>0,
tmp1=tmp1[!is.na(tmp1),], tmp1)
soma=sum(tmp1)
res.TAA[i-1,]=c(soma,nrow(tmp1)-soma)
}
colnames(res.TAA)=c('n1','n0')
list(res.TA=res.TA,res.SL=res.SL,res.TAA=res.TAA)
}
breakpt=mean(dat$time1)
get.summary.stats(breakpt,dat,max.SL,max.TA)
ifelse(nrow(tmp1[is.na(tmp1),])>0,
tmp1=tmp1[!is.na(tmp1),], tmp1)
nrow(tmp1[is.na(tmp1),])>0
tmp1=ifelse(nrow(tmp1[is.na(tmp1),])>0, tmp1[!is.na(tmp1),], tmp1)
tmp1
tmp1=tmp[,'TAA']
class(tmp1)
tmp1=ifelse(nrow(tmp1[is.na(tmp1),])>0, tmp1[!is.na(tmp1),, drop=FALSE], tmp1)
tmp1=tmp[,'TAA']
tmp1=ifelse(nrow(tmp1[is.na(tmp1),])>0, data.frame(tmp1[!is.na(tmp1),]), tmp1)
tmp1
tmp1=tmp[,'TAA']
tmp1=ifelse(nrow(tmp1[is.na(tmp1),])>0, as.data.frame(tmp1[!is.na(tmp1),]), tmp1)
tmp1=ifelse(nrow(tmp1[is.na(tmp1),])>0, tmp1[!is.na(tmp1),], tmp1)
tmp1=tmp[,'TAA']
tmp1=ifelse(nrow(tmp1[is.na(tmp1),])>0, tmp1[!is.na(tmp1),], tmp1) %>% data.frame()
tmp1
tmp1=tmp[,'TAA']
tmp1=tmp[,'TAA']
tmp1$TAA=ifelse(nrow(tmp1[is.na(tmp1),])>0, tmp1[!is.na(tmp1),], tmp1) %>% data.frame()
tmp1=ifelse(nrow(tmp1[is.na(tmp1),])>0, tmp1[!is.na(tmp1),], tmp1) %>% data.frame()
tmp1
soma=sum(tmp1)
nrow(tmp1)-soma
get.summary.stats=function(breakpt,dat,max.SL,max.TA){
breakpt1=c(0,breakpt,Inf)
n=length(breakpt1)
#get results for SL
res.SL=matrix(0,n-1,max.SL)
res.TA=matrix(0,n-1,max.TA)
res.TAA=matrix(0,n-1,2)
for (i in 2:n){
ind=which(breakpt1[i-1]<dat$time1 & dat$time1<breakpt1[i])
tmp=dat[ind,]
#get SL results
tmp1=table(tmp[,'SL'])
ind=as.numeric(names(tmp1))
res.SL[i-1,ind]=tmp1
#get TA results
tmp1=table(tmp[,'TA'])
ind=as.numeric(names(tmp1))
res.TA[i-1,ind]=tmp1
#get TAA results
tmp1=tmp[,'TAA']
tmp1=ifelse(nrow(tmp1[is.na(tmp1),])>0, tmp1[!is.na(tmp1),], tmp1) %>% data.frame()
soma=sum(tmp1)
res.TAA[i-1,]=c(soma,nrow(tmp1)-soma)
}
colnames(res.TAA)=c('n1','n0')
list(res.TA=res.TA,res.SL=res.SL,res.TAA=res.TAA)
}
source('gibbs functions2.R')
set.seed(1)
breakpt=mean(dat$time1)
ngibbs=10000
for (i in 1:ngibbs){
print(i)
breakpt=samp.move(breakpt=breakpt,max.time=max.time,dat=dat,
alpha=alpha,bern.a=bern.a,bern.b=bern.b,
max.SL=max.SL,max.TA=max.TA)
}
class(tmp$TAA)
class(dat$TAA)
dat$TAA<- as.factor(dat$TAA)
class(dat$TAA)
tmp=dat[ind,]
tmp1=tmp[,'TAA']
tmp1=ifelse(nrow(tmp1[is.na(tmp1),])>0, tmp1[!is.na(tmp1),], tmp1) %>% data.frame()
tmp1
nrow(tmp1[tmp1==1,])
names(tmp1)
names(tmp1)<- 'TAA'
tmp1
nrow(tmp1[tmp1$TAA==1,])
nrow(tmp1[tmp1=='1',])
nrow(tmp1[tmp1$TAA=='1',])
tmp1 %>% filter(TAA=="1") %>% nrow()
tmp1 %>% filter(TAA=='1') %>% nrow()
class(tmp)
class(tmp1)
tmp1[tmp1==1]
tmp1[tmp1==1,]
length(tmp1[tmp1==1,])
dat$TAA<- as.numeric(dat$TAA)
tmp1 %>% filter(TAA=='1') %>% nrow()
tmp1[tmp1==1,]
tmp1=tmp[,'TAA']
tmp=dat[ind,]
tmp1=tmp[,'TAA']
tmp1=ifelse(nrow(tmp1[is.na(tmp1),])>0, tmp1[!is.na(tmp1),], tmp1) %>% data.frame()
names(tmp1)<- 'TAA'
soma=tmp1 %>% filter(TAA=='1') %>% nrow()
soma
tmp1
dat<- chng.rel_angle.sign(dat)
tmp=dat[ind,]
View(tmp)
tmp1=tmp[,'TAA']
tmp1=ifelse(nrow(tmp1[is.na(tmp1),])>0, tmp1[!is.na(tmp1),], tmp1) %>% data.frame()
tmp1
names(tmp1)<- 'TAA'
tmp1
soma=tmp1 %>% filter(TAA=='1') %>% nrow()
soma=tmp1 %>% filter(TAA==1) %>% nrow()
soma=tmp1 %>% filter(TAA==1) %>% nrow()
nrow(tmp1)-soma
get.summary.stats=function(breakpt,dat,max.SL,max.TA){
breakpt1=c(0,breakpt,Inf)
n=length(breakpt1)
#get results for SL
res.SL=matrix(0,n-1,max.SL)
res.TA=matrix(0,n-1,max.TA)
res.TAA=matrix(0,n-1,2)
for (i in 2:n){
ind=which(breakpt1[i-1]<dat$time1 & dat$time1<breakpt1[i])
tmp=dat[ind,]
#get SL results
tmp1=table(tmp[,'SL'])
ind=as.numeric(names(tmp1))
res.SL[i-1,ind]=tmp1
#get TA results
tmp1=table(tmp[,'TA'])
ind=as.numeric(names(tmp1))
res.TA[i-1,ind]=tmp1
#get TAA results
tmp1=tmp[,'TAA']
tmp1=ifelse(nrow(tmp1[is.na(tmp1),])>0, tmp1[!is.na(tmp1),], tmp1) %>% data.frame()
names(tmp1)<- 'TAA'
soma=tmp1 %>% filter(TAA==1) %>% nrow()
res.TAA[i-1,]=c(soma,nrow(tmp1)-soma)
}
colnames(res.TAA)=c('n1','n0')
list(res.TA=res.TA,res.SL=res.SL,res.TAA=res.TAA)
}
breakpt=mean(dat$time1)
ngibbs=10000
for (i in 1:ngibbs){
print(i)
breakpt=samp.move(breakpt=breakpt,max.time=max.time,dat=dat,
alpha=alpha,bern.a=bern.a,bern.b=bern.b,
max.SL=max.SL,max.TA=max.TA)
}
par(mfrow=c(3,1))
plot(dat$SL)
plot(dat$TA)
plot(dat$TAA)
length(breakpt)
breakpt
abline(v=breakpt,lty=3,col='green')
dev.off()
plot(dat$SL)
abline(v=breakpt,lty=3,col='green')
abline(v=breakpt,lty=1,col='red')
plot(dat$TA)
abline(v=breakpt,lty=1,col='red')
plot(dat$TAA)
abline(v=breakpt,lty=1,col='red')
source('gibbs functions2.R')
source('gibbs functions2.R')
library(coda)
set.seed(1)
breakpt=mean(dat$time1)
View(dat)
system.time(for (i in 1:ngibbs){
print(i)
vals=samp.move(breakpt=breakpt,max.time=max.time,dat=dat,
alpha=alpha,bern.a=bern.a,bern.b=bern.b,
max.SL=max.SL,max.TA=max.TA)
breakpt=vals[[1]]
#store results
store.param[i,]=c(length(vals[[1]]), vals[[2]])
})
store.param=matrix(NA,ngibbs,2)
system.time(for (i in 1:ngibbs){
print(i)
vals=samp.move(breakpt=breakpt,max.time=max.time,dat=dat,
alpha=alpha,bern.a=bern.a,bern.b=bern.b,
max.SL=max.SL,max.TA=max.TA)
breakpt=vals[[1]]
#store results
store.param[i,]=c(length(vals[[1]]), vals[[2]])
})
423/60
length(breakpt)
par(mfrow=c(3,1))
plot(dat$SL); abline(v=breakpt,col='red')
plot(dat$SL); abline(v=breakpt,col='red')
plot(dat$SL); abline(v=breakpt,col='red')
plot(dat$SL); abline(v=breakpt,col='red')
plot(dat$TA); abline(v=breakpt,col='red')
plot(dat$TAA); abline(v=breakpt,col='red')
store.param.mcmc<- as.mcmc(store.param)
traceplot(store.param.mcmc[,1])
par(mfrow=c(1,1))
traceplot(store.param.mcmc[,1]); abline(h=nseg-1,col='red')
traceplot(store.param.mcmc[,1]);
traceplot(store.param.mcmc[,2])
traceplot(store.param.mcmc[,1]); title(y="# of Breakpoints")
traceplot(store.param.mcmc[,1]); title(y="# of Breakpoints", main = "ID 1")
traceplot(store.param.mcmc[,2])title(y="Log Marginal Likelihood", main = "ID 1")
traceplot(store.param.mcmc[,2]); title(y="Log Marginal Likelihood", main = "ID 1")
store.param[,2][10000]
write.csv(breakpt, "ID1 Breakpoints (Behavior).csv", row.names = F)
dat1<- dat %>% filter(id=1)
dat1<- dat %>% filter(id==1)
dat12<- dat %>% filter(id==12)
dat19<- dat %>% filter(id==19)
dat27<- dat %>% filter(id==27)
dat<- read.csv("Snail Kite Gridded Data.csv", header = T, sep = ",")
View(dat)
source('gibbs functions2.R')
dat1<- dat %>% filter(id==1)
dat12<- dat %>% filter(id==12)
dat19<- dat %>% filter(id==19)
dat27<- dat %>% filter(id==27)
View(dat)
names(dat)[7]
names(dat)[7]<- "dist"
dat1<- dat %>% filter(id==1)
dat12<- dat %>% filter(id==12)
dat19<- dat %>% filter(id==19)
dat27<- dat %>% filter(id==27)
View(dat1)
dat1$time1<- 1:nrow(dat1)
dat12$time1<- 1:nrow(dat12)
dat19$time1<- 1:nrow(dat19)
dat27$time1<- 1:nrow(dat27)
alpha=0.01
bern.a=bern.b=1
#useful stuff
max.time=max(dat12$time1)
max.SL=max(dat12$SL, na.rm = T)
max.TA=max(dat12$TA, na.rm = T)
#starting values
breakpt=mean(dat12$time1)
#matrix to store results
store.param=matrix(NA,ngibbs,2)
ngibbs=10000
alpha=0.01
bern.a=bern.b=1
max.time=max(dat12$time1)
View(dat1)
dat1<- dat %>% filter(id==1) %>% assign.rel_angle.bin() %>% assign.dist.bin() %>% chng.rel_angle.sign()
View(dat1)
dat12<- dat %>% filter(id==12) %>% assign.rel_angle.bin() %>% assign.dist.bin() %>% chng.rel_angle.sign()
dat19<- dat %>% filter(id==19) %>% assign.rel_angle.bin() %>% assign.dist.bin() %>% chng.rel_angle.sign()
dat27<- dat %>% filter(id==27) %>% assign.rel_angle.bin() %>% assign.dist.bin() %>% chng.rel_angle.sign()
View(dat12)
View(dat19)
View(dat27)
dat1$time1<- 1:nrow(dat1)
dat12$time1<- 1:nrow(dat12)
dat19$time1<- 1:nrow(dat19)
dat27$time1<- 1:nrow(dat27)
View(dat1)
alpha=0.01
bern.a=bern.b=1
max.time=max(dat12$time1)
max.SL=max(dat12$SL, na.rm = T)
max.TA=max(dat12$TA, na.rm = T)
breakpt=mean(dat12$time1)
store.param=matrix(NA,ngibbs,2)
ngibbs=10000
system.time(for (i in 1:ngibbs){
print(i)
vals=samp.move(breakpt=breakpt,max.time=max.time,dat=dat12,
alpha=alpha,bern.a=bern.a,bern.b=bern.b,
max.SL=max.SL,max.TA=max.TA)
breakpt=vals[[1]]
#store results
store.param[i,]=c(length(vals[[1]]), vals[[2]])
})
breakpt1=c(0,breakpt,Inf)
n=length(breakpt1)
res.SL=matrix(0,n-1,max.SL)
res.TA=matrix(0,n-1,max.TA)
res.TAA=matrix(0,n-1,2)
1=2
i=2
ind=which(breakpt1[i-1]<dat$time1 & dat$time1<breakpt1[i])
which(breakpt1[2-1]<dat$time1 & dat$time1<breakpt1[2])
which(breakpt1[2-1]<dat12$time1 & dat12$time1<breakpt1[2])
dat=dat12
ind=which(breakpt1[i-1]<dat$time1 & dat$time1<breakpt1[i])
tmp=dat[ind,]
tmp1=table(tmp[,'SL'])
tmp1
ind=as.numeric(names(tmp1))
res.SL[i-1,ind]=tmp1
res.SL
tmp1=tmp[,'TAA']
tmp1=ifelse(nrow(tmp1[is.na(tmp1),])>0, tmp1[!is.na(tmp1),], tmp1) %>% data.frame()
nrow(tmp1[is.na(tmp1),])
dim(tmp1[is.na(tmp1),])
is.na(tmp1)
length(tmp1[is.na(tmp1),])
tmp1[is.na(tmp1),]
tmp1[is.na(tmp1)]
nrow(tmp1[is.na(tmp1)])
length(tmp1[is.na(tmp1)])
tmp1[!is.na(tmp1)]
length(tmp1[is.na(tmp1)])>0
tmp1=tmp[,'TAA']
tmp1=ifelse(length(tmp1[is.na(tmp1)])>0, tmp1[!is.na(tmp1),], tmp1) %>% data.frame()
tmp1=ifelse(length(tmp1[is.na(tmp1)])>0, tmp1[!is.na(tmp1)], tmp1) %>% data.frame()
tmp1
tmp1=tmp[,'TAA']
!is.na(tmp1)
tmp1[!is.na(tmp1)]
tmp1=ifelse(length(tmp1[is.na(tmp1)])>0, tmp1[!is.na(tmp1)], tmp1)
tmp1=ifelse(length(tmp1[is.na(tmp1)])>0, tmp1[!is.na(tmp1)], print("Nope"))
tmp1=tmp[,'TAA']
tmp1=ifelse(length(tmp1[is.na(tmp1)])>0, tmp1[!is.na(tmp1)], print("Nope"))
class(dat12$TAA)
ifelse(length(tmp1[is.na(tmp1)])>0, print("YES"), print("Nope"))
tmp1=tmp[,'TAA']
ifelse(length(tmp1[is.na(tmp1)])>0, print("YES"), print("Nope"))
tmp1=tmp[,'TAA']
dim(tmp1)
tmp1=table(tmp[,'TA'])
dim(tmp1)
tmp1=tmp[,'TAA']
class(tmp1)
breakpt=mean(dat1$time1)
dat=dat1
breakpt1=c(0,breakpt,Inf)
n=length(breakpt1)
ind=which(breakpt1[i-1]<dat$time1 & dat$time1<breakpt1[i])
tmp=dat[ind,]
View(tmp)
tmp1=tmp[,'TAA']
tmp1=ifelse(length(tmp1[is.na(tmp1)])>0, tmp1[!is.na(tmp1)], tmp1) %>% data.frame()
tmp1=tmp[,'TAA']
tmp1=ifelse(nrow(tmp1[is.na(tmp1),])>0, tmp1[!is.na(tmp1),], tmp1) %>% data.frame()
length(tmp1[is.na(tmp1)])
length(tmp1[is.na(tmp1)])>0
tmp1[!is.na(tmp1)]
tmp1
ifelse(length(tmp1[is.na(tmp1)])>0, tmp1[!is.na(tmp1)], tmp1)
length(tmp1[is.na(tmp1)])>0
tmp1=tmp[,'TAA']
tmp1=if (length(tmp1[is.na(tmp1)])>0) {
tmp1[!is.na(tmp1)]
else tmp1
} %>% data.frame()
(length(tmp1[is.na(tmp1)])>0)
tmp1=tmp[,'TAA']
tmp1=if (length(tmp1[is.na(tmp1)])>0) {
tmp1[!is.na(tmp1)]
} else { tmp1
} %>% data.frame()
tmp1=tmp[,'TAA']
tmp1=if (length(tmp1[is.na(tmp1)])>0) {
tmp1[!is.na(tmp1)]
} else { tmp1
} %>% data.frame()
tmp1=tmp[,'TAA']
tmp1=if (length(tmp1[is.na(tmp1)])>0) {
tmp1[!is.na(tmp1)]
} else { tmp1
}
names(tmp1)
tmp1 %>% filter(TAA==1) %>% nrow()
soma=sum(tmp1)
nrow(tmp1)-soma
length(tmp1)-soma
source('gibbs functions2.R')
breakpt=mean(dat1$time1)
store.param=matrix(NA,ngibbs,2)
ngibbs=10000
for (i in 1:ngibbs){
print(i)
vals=samp.move(breakpt=breakpt,max.time=max.time,dat=dat1,
alpha=alpha,bern.a=bern.a,bern.b=bern.b,
max.SL=max.SL,max.TA=max.TA)
breakpt=vals[[1]]
#store results
store.param[i,]=c(length(vals[[1]]), vals[[2]])
}
source('gibbs functions2.R')
breakpt=mean(dat1$time1)
store.param=matrix(NA,ngibbs,2)
alpha=0.01
bern.a=bern.b=1
#useful stuff
max.time=max(dat1$time1)
max.SL=max(dat1$SL, na.rm = T)
max.TA=max(dat1$TA, na.rm = T)
ngibbs=10000
for (i in 1:ngibbs){
print(i)
vals=samp.move(breakpt=breakpt,max.time=max.time,dat=dat1,
alpha=alpha,bern.a=bern.a,bern.b=bern.b,
max.SL=max.SL,max.TA=max.TA)
breakpt=vals[[1]]
#store results
store.param[i,]=c(length(vals[[1]]), vals[[2]])
}
length(breakpt)
par(mfrow=c(3,1))
plot(dat1$SL); abline(v=breakpt,col='red')
plot(dat1$TA); abline(v=breakpt,col='red')
plot(dat1$TAA); abline(v=breakpt,col='red')
store.param.mcmc<- as.mcmc(store.param)
par(mfrow=c(1,1))
traceplot(store.param.mcmc[,1]); title(y="# of Breakpoints", main = "ID 1")
traceplot(store.param.mcmc[,2]); title(y="Log Marginal Likelihood", main = "ID 1")
store.param[,2][10000]
write.csv(breakpt, "ID1 Breakpoints (Behavior).csv", row.names = F)
alpha=0.01
bern.a=bern.b=1
#useful stuff
max.time=max(dat12$time1)
max.SL=max(dat12$SL, na.rm = T)
max.TA=max(dat12$TA, na.rm = T)
#starting values
breakpt=mean(dat12$time1)
#matrix to store results
store.param=matrix(NA,ngibbs,2)
ngibbs=10000
system.time(for (i in 1:ngibbs){
print(i)
vals=samp.move(breakpt=breakpt,max.time=max.time,dat=dat12,
alpha=alpha,bern.a=bern.a,bern.b=bern.b,
max.SL=max.SL,max.TA=max.TA)
breakpt=vals[[1]]
#store results
store.param[i,]=c(length(vals[[1]]), vals[[2]])
})
134/60
length(breakpt)
breakpt
par(mfrow=c(3,1))
plot(dat12$SL); abline(v=breakpt,col='red')
plot(dat12$TA); abline(v=breakpt,col='red')
plot(dat12$TAA); abline(v=breakpt,col='red')
write.csv(breakpt, "ID12 Breakpoints (Behavior).csv", row.names = F)
store.param.mcmc<- as.mcmc(store.param)
par(mfrow=c(1,1))
traceplot(store.param.mcmc[,1]); title(y="# of Breakpoints", main = "ID 12")
traceplot(store.param.mcmc[,2]); title(y="Log Marginal Likelihood", main = "ID 12")
alpha=0.01
bern.a=bern.b=1
max.time=max(dat19$time1)
max.SL=max(dat19$SL, na.rm = T)
max.TA=max(dat19$TA, na.rm = T)
breakpt=mean(dat19$time1)
store.param=matrix(NA,ngibbs,2)
ngibbs=10000
system.time(for (i in 1:ngibbs){
print(i)
vals=samp.move(breakpt=breakpt,max.time=max.time,dat=dat19,
alpha=alpha,bern.a=bern.a,bern.b=bern.b,
max.SL=max.SL,max.TA=max.TA)
breakpt=vals[[1]]
#store results
store.param[i,]=c(length(vals[[1]]), vals[[2]])
})
90/60
length(breakpt)
write.csv(breakpt, "ID19 Breakpoints (Behavior).csv", row.names = F)
par(mfrow=c(3,1))
plot(dat19$SL); abline(v=breakpt,col='red')
plot(dat19$TA); abline(v=breakpt,col='red')
plot(dat19$TAA); abline(v=breakpt,col='red')
store.param[,2][10000]
store.param.mcmc<- as.mcmc(store.param)
par(mfrow=c(1,1))
traceplot(store.param.mcmc[,1]); title(y="# of Breakpoints", main = "ID 19")
traceplot(store.param.mcmc[,2]); title(y="Log Marginal Likelihood", main = "ID 19")
alpha=0.01
bern.a=bern.b=1
max.time=max(dat27$time1)
max.SL=max(dat27$SL, na.rm = T)
max.TA=max(dat27$TA, na.rm = T)
breakpt=mean(dat27$time1)
store.param=matrix(NA,ngibbs,2)
ngibbs=10000
system.time(for (i in 1:ngibbs){
print(i)
vals=samp.move(breakpt=breakpt,max.time=max.time,dat=dat27,
alpha=alpha,bern.a=bern.a,bern.b=bern.b,
max.SL=max.SL,max.TA=max.TA)
breakpt=vals[[1]]
#store results
store.param[i,]=c(length(vals[[1]]), vals[[2]])
})
length(breakpt)
store.param[,2][10000]
write.csv(breakpt, "ID27 Breakpoints (Behavior).csv", row.names = F)
par(mfrow=c(3,1))
plot(dat27$SL); abline(v=breakpt,col='red')
plot(dat27$TA); abline(v=breakpt,col='red')
plot(dat27$TAA); abline(v=breakpt,col='red')
store.param.mcmc<- as.mcmc(store.param)
par(mfrow=c(1,1))
traceplot(store.param.mcmc[,1]); title(y="# of Breakpoints", main = "ID 27")
traceplot(store.param.mcmc[,2]); title(y="Log Marginal Likelihood", main = "ID 27")
