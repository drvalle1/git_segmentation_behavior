heatmap(data = behav.list, brkpts = brkpts, dat.res = dat.res, type = "behav")
dat_out<- map(behav.list, assign.time.seg) %>% map_dfr(`[`)  #assign time seg and make as DF
View(dat_out)
setwd("~/Documents/Snail Kite Project/Data/R Scripts/git_LDA_behavior")
write.csv(dat_out, "Snail Kite Gridded Data_larger_behav.csv", row.names = F)
library(tidyverse)
library(tictoc)
library(furrr)
library(viridis)
source('gibbs functions2.R')
source('helper functions.R')
source('gibbs sampler2.R')
dat<- read.csv("Snail Kite Gridded Data_larger.csv", header = T, sep = ",")
View(dat)
#remove IDs w < 200 obs; won't run well
dat<- dat %>% group_by(id) %>% filter(n() > 200) %>% ungroup()
dat.list<- df.to.list(dat=dat)
behav.list<- behav.prep(dat=dat, tstep = 3600)  #add move params and filter by 3600 s interval
ngibbs = 20000
## Run Gibbs sampler
plan(multisession)  #run all MCMC chains in parallel
dat.res<- behavior_segment(dat = behav.list, ngibbs = ngibbs)
2182.109/60
## Traceplots
#type is either 'nbrks' or 'LML' for y-axis label
identity<- names(behav.list)
traceplot(data = dat.res$nbrks, type = "nbrks", identity = identity)
traceplot(data = dat.res$LML, type = "LML", identity = identity)
##Determine MAP for selecting breakpoints
MAP<- apply(dat.res$LML, 1, function(x) getMAP(dat = x, nburn = 500))
MAP
brkpts<- getBreakpts(dat = dat.res$brkpts, MAP = MAP, brk.cols = 99)  #brk.cols is max matrix cols
View(brkpts)
## Heatmaps
heatmap(data = behav.list, brkpts = brkpts, dat.res = dat.res, type = "behav")
dat<- behav.list[[1]]
tmp=which(unique(dat$id) == brkpts$id)
breakpt<- brkpts[tmp,-1] %>% discard(is.na) %>% as.numeric(.[1,])
breakpt
breakpt1=c(0,breakpt,Inf)
breakpt1
n=length(breakpt1)
res=matrix(NA,nrow(dat),1)
i=2
ind=which(breakpt1[i-1]<dat$time1 & dat$time1<breakpt1[i])
res[ind,]=i-1
View(res)
for (i in 2:n){
ind=which(breakpt1[i-1]<dat$time1 & dat$time1<breakpt1[i])
res[ind,]=i-1
}
unique(res)
res[is.na(res),]
which(is.na(res))
res=matrix(NA,nrow(dat),1)
for (i in 2:n){
ind=which(breakpt1[i-1]<=dat$time1 & dat$time1<breakpt1[i])
res[ind,]=i-1
}
which(is.na(res))
unique(res)
dat_out<- map(behav.list, assign.time.seg) %>% map_dfr(`[`)  #assign time seg and make as DF
View(dat_out)
dat_out[is.na(dat_out$tseg),]
which(is.na(dat_out$tseg))
source('helper functions.R')
dat_out<- map(behav.list, assign.time.seg) %>% map_dfr(`[`)  #assign time seg and make as DF
dat_out[is.na(dat_out$tseg),]
which(is.na(dat_out$tseg))
setwd("~/Documents/Snail Kite Project/Data/R Scripts/git_LDA_behavior")
write.csv(dat_out, "Snail Kite Gridded Data_larger_behav.csv", row.names = F)
library(tidyverse)
library(tictoc)
library(furrr)
library(viridis)
source('gibbs functions2.R')
source('helper functions.R')
source('gibbs sampler2.R')
dat<- read.csv("Snail Kite Gridded Data_larger.csv", header = T, sep = ",")
#remove IDs w < 200 obs; won't run well
dat<- dat %>% group_by(id) %>% filter(n() > 200) %>% ungroup()
dat.list<- df.to.list(dat=dat)
behav.list<- behav.prep(dat=dat, tstep = 3600)  #add move params and filter by 3600 s interval
ngibbs = 20000
## Run Gibbs sampler
plan(multisession)  #run all MCMC chains in parallel
ngibbs = 40000
## Run Gibbs sampler
plan(multisession)  #run all MCMC chains in parallel
dat.res<- behavior_segment(dat = behav.list, ngibbs = ngibbs)
4402.522/60
## Traceplots
#type is either 'nbrks' or 'LML' for y-axis label
identity<- names(behav.list)
traceplot(data = dat.res$nbrks, type = "nbrks", identity = identity)
traceplot(data = dat.res$LML, type = "LML", identity = identity)
##Determine MAP for selecting breakpoints
MAP<- apply(dat.res$LML, 1, function(x) getMAP(dat = x, nburn = 500))
MAP
brkpts<- getBreakpts(dat = dat.res$brkpts, MAP = MAP, brk.cols = 99)  #brk.cols is max matrix cols
View(brkpts)
## Heatmaps
heatmap(data = behav.list, brkpts = brkpts, dat.res = dat.res, type = "behav")
dat_out<- map(behav.list, assign.time.seg) %>% map_dfr(`[`)  #assign time seg and make as DF
dat_out<- map(behav.list, assign.time.seg)
lapply(dat_out, function(x) unique(x$tseg))
dat<- behav.list$`29`
tmp=which(unique(dat$id) == brkpts$id)
identity[tmp]
View(brkpts)
ceiling(3.08)
round(3.08,0)
round(3.24,0)
breakpt<- brkpts[tmp,-1] %>% discard(is.na) %>% as.numeric(.[1,])
breakpt1=c(0,breakpt,Inf)
diff(breakpt1)
n=length(breakpt1)
warnings()
n=length(breakpt1)
res=matrix(NA,nrow(dat),1)
View(dat)
for (i in 2:n){
if (diff(breakpt1[i-1], breakpt1[i]) < 1) {
ind=which(breakpt1[i-1]<=dat$time1 & dat$time1<(breakpt1[i]+1))
res[ind,]=i-1
} else {
ind=which(breakpt1[i-1]<=dat$time1 & dat$time1<breakpt1[i])
res[ind,]=i-1
}
}
i=2
diff(breakpt1[i-1], breakpt1[i])
(breakpt1[i] - breakpt1[i-1])
(breakpt1[i] - breakpt1[i-1])
i=3
(breakpt1[i] - breakpt1[i-1])
(breakpt1[i] - breakpt1[i-1]) < 1
for (i in 2:n){
if ((breakpt1[i] - breakpt1[i-1]) < 1) {
ind=which(breakpt1[i-1]<=dat$time1 & dat$time1<(breakpt1[i]+1))
res[ind,]=i-1
} else {
ind=which(breakpt1[i-1]<=dat$time1 & dat$time1<breakpt1[i])
res[ind,]=i-1
}
}
View(res)
i=1
i=2
(breakpt1[i] - breakpt1[i-1]) < 1)
(breakpt1[i] - breakpt1[i-1]) < 1
ind=which(breakpt1[i-1]<=dat$time1 & dat$time1<breakpt1[i])
i=3
(breakpt1[i] - breakpt1[i-1]) < 1
ind=which(breakpt1[i-1]<=dat$time1 & dat$time1<(breakpt1[i]+1))
i-1
ind
i=4
(breakpt1[i] - breakpt1[i-1]) < 1
ind=which(breakpt1[i-1]<=dat$time1 & dat$time1<breakpt1[i])
if (diff(breakpt1) < 1)
)
diff(breakpt1) < 1
which(diff(breakpt1) < 1)
breakpt1[tmp1+1,] + 1
tmp1<- which(diff(breakpt1) < 1)
breakpt1[tmp1+1,] + 1
breakpt1[(tmp1+1),] + 1
(tmp1+1)
breakpt1[(tmp1+1)] + 1
breakpt1[tmp1+1,]<- breakpt1[(tmp1+1)] + 1
breakpt1[tmp1+1]<- breakpt1[(tmp1+1)] + 1
#---------------------------------------
assign.time.seg=function(dat){  #add tseg assignment to each obs
tmp=which(unique(dat$id) == brkpts$id)
breakpt<- brkpts[tmp,-1] %>% discard(is.na) %>% as.numeric(.[1,])
breakpt1=c(0,breakpt,Inf)
tmp1<- which(diff(breakpt1) < 1)  #check for impossible time units
breakpt1[tmp1+1]<- breakpt1[(tmp1+1)] + 1  #fix impossible time units
n=length(breakpt1)
res=matrix(NA,nrow(dat),1)
for (i in 2:n){
ind=which(breakpt1[i-1]<=dat$time1 & dat$time1<breakpt1[i])
res[ind,]=i-1
}
dat$tseg<- as.vector(res)
dat
}
source('helper functions.R')
dat_out<- map(behav.list, assign.time.seg)
lapply(dat_out, function(x) unique(x$tseg))
lapply(dat_out, function(x) diff(unique(x$tseg)))
dat_out<- map(behav.list, assign.time.seg) %>% map_dfr(`[`)  #assign time seg and make as DF
setwd("~/Documents/Snail Kite Project/Data/R Scripts/git_LDA_behavior")
write.csv(dat_out, "Snail Kite Gridded Data_larger_behav.csv", row.names = F)
set.seed(2)
library('MCMCpack')
library('Rcpp')
library(progress)
library(tidyverse)
library(lubridate)
library(rnaturalearth)
library(rnaturalearthdata)
library(sf)
source('LDA_behavior_function.R')
source('gibbs sampler.R')
source('helper functions.R')
sourceCpp('aux1.cpp')
#get data
dat<- read.csv('Snail Kite Gridded Data_larger_behav.csv', header = T, sep = ',')
dat$date<- dat$date %>% as_datetime()
dat.list<- df.to.list(dat)
obs<- get.summary.stats_behav(dat)
#prepare for Gibbs sampler
ngibbs=1000
nburn=ngibbs/2
ind1=grep('y1',colnames(obs))
ind2=grep('y2',colnames(obs))
nmaxclust=max(length(ind1),length(ind2))-1  #max possible is 1 fewer than largest number of bins
res=LDA_behavior_gibbs(dat=obs,gamma1=gamma1,alpha=alpha,
ngibbs=ngibbs,nmaxclust=nmaxclust,
nburn=nburn)
#Check traceplot of log marginal likelihood
plot(res$loglikel,type='l')
#Extract and plots proportions of behaviors per time segment
theta.post<- res$theta[(nburn+1):ngibbs,]
theta.estim<- theta.post %>% apply(2, mean) %>% matrix(nrow(obs), nmaxclust) #calc mean of posterior
boxplot(theta.estim)
#Determine proportion of behaviors (across all time segments)
#Possibly set threshold below which behaviors are excluded
round(apply(theta.estim, 2, sum)/nrow(theta.estim), digits = 3)
behav.res<- get_behav_hist(res)
#Plot histograms of frequency data
ggplot(behav.res, aes(x = bin, y = count, fill = behav)) +
geom_bar(stat = 'identity') +
scale_fill_viridis_c(guide = F, direction = -1) +
labs(x = "\nBin", y = "Frequency\n") +
theme_bw() +
theme(axis.title = element_text(size = 16), axis.text.y = element_text(size = 14),
axis.text.x.bottom = element_text(size = 12),
strip.text = element_text(size = 14), strip.text.x = element_text(face = "bold")) +
facet_grid(param ~ behav, scales = "free_y")
#Plot histograms of proportion data
ggplot(behav.res, aes(x = bin, y = prop, fill = behav)) +
geom_bar(stat = 'identity') +
scale_fill_viridis_c(guide = F, direction = -1) +
labs(x = "\nBin", y = "Proportion\n") +
theme_bw() +
theme(axis.title = element_text(size = 16), axis.text.y = element_text(size = 14),
axis.text.x.bottom = element_text(size = 12),
strip.text = element_text(size = 14), strip.text.x = element_text(face = "bold")) +
facet_grid(param ~ behav, scales = "fixed")
#Assign behaviors (via theta) to each time segment
theta.estim<- data.frame(id = obs$id, tseg = obs$tseg, theta.estim)
names(theta.estim)<- c("id", "tseg", 1:nmaxclust)  #define behaviors
nobs<- data.frame(id = obs$id, tseg = obs$tseg, n = apply(obs[,11:16], 1, sum)) #calc obs per tseg
View(theta.estim)
View(nobs)
which(nobs$n < 1)
#Create augmented matrix by replicating rows (tsegs) according to obs per tseg
theta.estim2<- aug_behav_df(dat = dat, theta.estim = theta.estim, nobs = nobs)
rm(theta.estim2)
#Create augmented matrix by replicating rows (tsegs) according to obs per tseg
theta.estim2<- aug_behav_df(dat = dat, theta.estim = theta.estim, nobs = nobs)
source('helper functions.R')
rm(theta.estim2)
#Create augmented matrix by replicating rows (tsegs) according to obs per tseg
theta.estim2<- aug_behav_df(dat = dat, theta.estim = theta.estim, nobs = nobs)
#Change into long format
theta.estim.long<- theta.estim2 %>% gather(key, value, -id, -tseg, -time1, -date)
theta.estim.long$date<- theta.estim.long$date %>% as_datetime()
names(theta.estim.long)[5:6]<- c("behavior","prop")
View(theta.estim.long)
#lines
ggplot(theta.estim.long) +
geom_path(aes(x=time1, y=prop, color = behavior)) +
labs(x = "\nObservation", y = "State Probability\n") +
scale_color_viridis_d("Behavior", direction = -1) +
theme_bw() +
theme(axis.title = element_text(size = 16), axis.text.y = element_text(size = 14),
axis.text.x.bottom = element_text(size = 12),
strip.text = element_text(size = 14, face = "bold"),
panel.grid = element_blank()) +
facet_wrap(~id, scales = "free_x")
#stacked area
ggplot(theta.estim.long) +
geom_area(aes(x=time1, y=prop, fill = behavior), color = "black", size = 0.25,
position = "fill") +
labs(x = "\nObservation", y = "State Probability\n") +
scale_fill_viridis_d("Behavior", direction = -1) +
theme_bw() +
theme(axis.title = element_text(size = 16), axis.text.y = element_text(size = 14),
axis.text.x.bottom = element_text(size = 12),
strip.text = element_text(size = 14, face = "bold"),
panel.grid = element_blank()) +
facet_wrap(~id, scales = "free_x")
#Window of peak breeding (March 1 - June 30)
breed<- data.frame(xmin = as_datetime(c("2016-03-01 00:00:00","2017-03-01 00:00:00",
"2018-03-01 00:00:00","2019-03-01 00:00:00")),
xmax = as_datetime(c("2016-06-30 23:59:59","2017-06-30 23:59:59",
"2018-06-30 23:59:59","2019-06-30 23:59:59")),
ymin = -Inf, ymax = Inf)
#lines
ggplot() +
geom_rect(data = breed, aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
fill = "grey", alpha = 0.5) +
geom_path(data = theta.estim.long, aes(x=date, y=prop, color = behavior)) +
labs(x = "\nTime", y = "State Probability\n") +
scale_color_viridis_d("Behavior", direction = -1) +
theme_bw() +
theme(axis.title = element_text(size = 16), axis.text.y = element_text(size = 14),
axis.text.x.bottom = element_text(size = 12),
strip.text = element_text(size = 14, face = "bold"),
panel.grid = element_blank()) +
facet_wrap(~id)
#stacked area
ggplot(theta.estim.long) +
geom_area(aes(x=date, y=prop, fill = behavior), color = "black", size = 0.25,
position = "fill") +
geom_rect(data = breed, aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
fill = "grey", alpha = 0.25) +
labs(x = "\nTime", y = "State Probability\n") +
scale_fill_viridis_d("Behavior", direction = -1) +
theme_bw() +
theme(axis.title = element_text(size = 16), axis.text.y = element_text(size = 14),
axis.text.x.bottom = element_text(size = 12),
strip.text = element_text(size = 14, face = "bold"),
panel.grid = element_blank()) +
facet_wrap(~id)
#Add cluster assignments to original data; one column for dominant behavior and another for prop/prob to use for alpha of points
dat2<- assign_behav(dat.list = dat.list, theta.estim2 = theta.estim2)
View(dat2)
#load map data
usa <- ne_states(country = "United States of America", returnclass = "sf")
fl<- usa %>% filter(name == "Florida")
fl<- st_transform(fl, crs = "+init=epsg:32617") #change projection to UTM 17N
# Facet plot of maps
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$utmlong-120000), max(dat$utmlong+40000)),
ylim = c(min(dat$utmlat-20000), max(dat$utmlat+20000)), expand = FALSE) +
geom_path(data = dat2, aes(x=utmlong, y=utmlat), color="gray60", size=0.25) +
geom_point(data = dat2, aes(utmlong, utmlat, fill=behav), size=2.5, pch=21, alpha=dat2$prop) +
scale_fill_viridis_d("Behavior", direction = -1) +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(axis.title = element_text(size = 16),
strip.text = element_text(size = 14, face = "bold"),
panel.grid = element_blank()) +
guides(fill = guide_legend(label.theme = element_text(size = 12),
title.theme = element_text(size = 14))) +
facet_wrap(~id)
# Facet plot of maps
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-120000), max(dat$x+40000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_path(data = dat2, aes(x=x, y=y), color="gray60", size=0.25) +
geom_point(data = dat2, aes(x, y, fill=behav), size=2.5, pch=21, alpha=dat2$prop) +
scale_fill_viridis_d("Behavior", direction = -1) +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(axis.title = element_text(size = 16),
strip.text = element_text(size = 14, face = "bold"),
panel.grid = element_blank()) +
guides(fill = guide_legend(label.theme = element_text(size = 12),
title.theme = element_text(size = 14))) +
facet_wrap(~id)
# Facet plot of maps
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-120000), max(dat$x+40000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_path(data = dat2, aes(x=x, y=y), color="gray60", size=0.25) +
geom_point(data = dat2, aes(x, y, fill=behav), size=2.5, pch=21, alpha=dat2$prop) +
scale_fill_viridis_d("Behavior", direction = -1) +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(axis.title = element_text(size = 16),
strip.text = element_text(size = 14, face = "bold"),
panel.grid = element_blank()) +
guides(fill = guide_legend(label.theme = element_text(size = 12),
title.theme = element_text(size = 14))) +
facet_wrap(~id)
# Facet plot of maps
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-120000), max(dat$x+40000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_path(data = dat2, aes(x=x, y=y), color="gray60", size=0.25) +
geom_point(data = dat2, aes(x, y, fill=behav), size=2.5, pch=21, alpha=dat2$prop) +
scale_fill_viridis_d("Behavior", direction = -1) +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(axis.title = element_text(size = 16),
strip.text = element_text(size = 14, face = "bold"),
panel.grid = element_blank()) +
guides(fill = guide_legend(label.theme = element_text(size = 12),
title.theme = element_text(size = 14))) +
facet_wrap(~id)
# Facet plot of maps
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-120000), max(dat$x+40000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_path(data = dat2, aes(x=x, y=y), color="gray60", size=0.25) +
geom_point(data = dat2, aes(x, y, fill=behav), size=2.5, pch=21, alpha=dat2$prop) +
scale_fill_viridis_d("Behavior", direction = -1) +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(axis.title = element_text(size = 16),
strip.text = element_text(size = 14, face = "bold"),
panel.grid = element_blank()) +
guides(fill = guide_legend(label.theme = element_text(size = 12),
title.theme = element_text(size = 14))) +
facet_wrap(~id)
# Facet plot of maps
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-120000), max(dat$x+40000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_path(data = dat2, aes(x=x, y=y), color="gray60", size=0.25) +
geom_point(data = dat2, aes(x, y, fill=behav), size=2.5, pch=21, alpha=dat2$prop) +
scale_fill_viridis_d("Behavior", direction = -1) +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(axis.title = element_text(size = 16),
strip.text = element_text(size = 14, face = "bold"),
panel.grid = element_blank()) +
guides(fill = guide_legend(label.theme = element_text(size = 12),
title.theme = element_text(size = 14))) +
facet_wrap(~id)
# Facet plot of maps
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-120000), max(dat$x+40000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_path(data = dat2, aes(x=x, y=y), color="gray60", size=0.25) +
geom_point(data = dat2, aes(x, y, fill=behav), size=2.5, pch=21, alpha=dat2$prop) +
scale_fill_viridis_d("Behavior", direction = -1) +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(axis.title = element_text(size = 16),
strip.text = element_text(size = 14, face = "bold"),
panel.grid = element_blank()) +
guides(fill = guide_legend(label.theme = element_text(size = 12),
title.theme = element_text(size = 14))) +
facet_wrap(~id)
# Facet plot of maps
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-120000), max(dat$x+40000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_path(data = dat2, aes(x=x, y=y), color="gray60", size=0.25) +
geom_point(data = dat2, aes(x, y, fill=behav), size=2.5, pch=21, alpha=dat2$prop) +
scale_fill_viridis_d("Behavior", direction = -1) +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(axis.title = element_text(size = 16),
strip.text = element_text(size = 14, face = "bold"),
panel.grid = element_blank()) +
guides(fill = guide_legend(label.theme = element_text(size = 12),
title.theme = element_text(size = 14))) +
facet_wrap(~id)
# Facet plot of maps
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-120000), max(dat$x+40000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_path(data = dat2, aes(x=x, y=y), color="gray60", size=0.25) +
geom_point(data = dat2, aes(x, y, fill=behav), size=2.5, pch=21, alpha=dat2$prop) +
scale_fill_viridis_d("Behavior", direction = -1) +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(axis.title = element_text(size = 16),
strip.text = element_text(size = 14, face = "bold"),
panel.grid = element_blank()) +
guides(fill = guide_legend(label.theme = element_text(size = 12),
title.theme = element_text(size = 14))) +
facet_wrap(~id)
# Facet plot of maps
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-120000), max(dat$x+40000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_path(data = dat2, aes(x=x, y=y), color="gray60", size=0.25) +
geom_point(data = dat2, aes(x, y, fill=behav), size=2.5, pch=21, alpha=dat2$prop) +
scale_fill_viridis_d("Behavior", direction = -1) +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(axis.title = element_text(size = 16),
strip.text = element_text(size = 14, face = "bold"),
panel.grid = element_blank()) +
guides(fill = guide_legend(label.theme = element_text(size = 12),
title.theme = element_text(size = 14))) +
facet_wrap(~id)
# Facet plot of maps
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-120000), max(dat$x+40000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_path(data = dat2, aes(x=x, y=y), color="gray60", size=0.25) +
geom_point(data = dat2, aes(x, y, fill=behav), size=2.5, pch=21, alpha=dat2$prop) +
scale_fill_viridis_d("Behavior", direction = -1) +
labs(x = "Longitude", y = "Latitude") +
theme_bw() +
theme(axis.title = element_text(size = 16),
strip.text = element_text(size = 14, face = "bold"),
panel.grid = element_blank(), axis.text = element_blank()) +
guides(fill = guide_legend(label.theme = element_text(size = 12),
title.theme = element_text(size = 14))) +
facet_wrap(~id)
